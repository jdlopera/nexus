---
import { Image } from "astro:assets";
import "../styles/global.css";
import logotipoNegro from "../assets/nexus_negro.png";
import logotipoBlanco from "../assets/nexus_blanco.png";
import LanguageSelector from "./LanguageSelector.astro";
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from "../i18n/utils";
import { getI18N } from "../i18n";
import { routes, sectionIds } from "../i18n/ui";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const currentLang = getLangFromUrl(Astro.url);
const i18n = getI18N({ currentLocale: currentLang });

// Determinar si estamos en la página de inicio
const currentPath = Astro.url.pathname;
const isHomePage = currentPath === "/" || currentPath === `/${lang}/` || currentPath === `/${lang}`;

// Determinar si estamos en la página de contacto
const contactPath = `/${routes[lang].contact}`;
const isContactPage = currentPath === contactPath || currentPath === `/${lang}${contactPath}`;

// Enlaces de anclaje (solo visibles en home)
const anchorLinks = [
  {
    name: t("nav.about"),
    href: `/#${sectionIds[lang].about}`,
    sectionId: sectionIds[lang].about,
    isAnchor: true,
  },
  {
    name: t("nav.planning"),
    href: `/#${sectionIds[lang].planning}`,
    sectionId: sectionIds[lang].planning,
    isAnchor: true,
  },
  {
    name: t("nav.team"),
    href: `/#${sectionIds[lang].team}`,
    sectionId: sectionIds[lang].team,
    isAnchor: true,
  },
];

// Enlace a Home (solo visible cuando no estamos en home)
const homeLink = {
  name: t("nav.home"),
  href: translatePath("/", lang),
  sectionId: null,
  isAnchor: false,
};

// Enlaces normales (visibles en todas las páginas)
const normalLinks = [
  {
    name: t("nav.services"),
    href: translatePath(`/${routes[lang].services}`, lang),
    sectionId: null,
    isAnchor: false,
  },
  {
    name: t("nav.success"),
    href: translatePath(`/${routes[lang].success}`, lang),
    sectionId: null,
    isAnchor: false,
  },
  {
    name: t("nav.faq"),
    href: translatePath(`/${routes[lang].faq}`, lang),
    sectionId: null,
    isAnchor: false,
  },
  {
    name: t("nav.contact"),
    href: translatePath(`/${routes[lang].contact}`, lang),
    sectionId: null,
    isAnchor: false,
  },
];

// Combinar enlaces según la página actual
const links = isHomePage 
  ? [...anchorLinks, ...normalLinks]                 // En home: mostrar anclajes + enlaces normales
  : [homeLink, ...normalLinks];                      // En otras páginas: mostrar Home + enlaces normales

/* const formContact = {
  title: i18n.CONTACT.TITLE,
  name: i18n.CONTACT.NAME,
  email: i18n.CONTACT.EMAIL,
  message: i18n.CONTACT.MESSAGE,
  send: i18n.CONTACT.SEND,
}; */
---

<nav class="navbar" id="navbar" data-contact-page={isContactPage}>
  <div class="nav-container">
    <a href={translatePath("/", lang)} class="logo-container">
      <Image
        class="logo logo-blanco"
        src={logotipoBlanco}
        alt="Nexus Logo"
        width="150"
        height="0"
      />
      <Image
        class="logo logo-negro"
        src={logotipoNegro}
        alt="Nexus Logo"
        width="150"
        height="0"
      />
    </a>
    <div class="menu-toggle mobile-menu-toggle" id="mobile-menu">
      <div class="menu-icon">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
    <ul class="nav-links" id="nav-links">
      {
        links.map((link) => (
          <li>
            <a href={link.href} data-section-id={link.sectionId !== null ? link.sectionId : undefined}>
              {link.name}
            </a>
          </li>
        ))
      }
      <LanguageSelector />
    </ul>
  </div>
</nav>

<script>
  function setupNavbar() {
    const navbar = document.querySelector("#navbar") as HTMLElement | null;
    const mobileMenuToggle = document.querySelector(".mobile-menu-toggle");
    const navLinks = document.querySelector(".nav-links");
    const menuIcon = document.querySelector(".menu-icon");
    const isContactPage = navbar?.getAttribute("data-contact-page") === "true";

    // Aplicar clase de contacto inmediatamente si estamos en la página de contacto
    if (isContactPage && navbar) {
      navbar.classList.add("contact-page");
    }

    // Función para manejar el scroll
    function handleScroll() {
      if (window.scrollY > 50) {
        navbar?.classList.add("scrolled");
        
        // En la página de contacto, al hacer scroll eliminamos el estilo oscuro
        if (isContactPage) {
          navbar?.classList.remove("contact-page");
        }
      } else {
        navbar?.classList.remove("scrolled");
        
        // Al volver arriba en la página de contacto, restauramos el estilo oscuro
        if (isContactPage) {
          navbar?.classList.add("contact-page");
        }
      }
    }

    // Función para cerrar el menú
    function closeMenu() {
      navLinks?.classList.remove("active");
      menuIcon?.classList.remove("active");
      document.body.style.overflow = "";
    }

    // Función para alternar el menú
    function toggleMenu() {
      const isOpen = navLinks?.classList.contains("active");

      if (isOpen) {
        closeMenu();
      } else {
        navLinks?.classList.add("active");
        menuIcon?.classList.add("active");
        document.body.style.overflow = "hidden";
      }
    }

    // Función para scroll suave
    function scrollToSection(targetId: string) {
      const targetElement = document.getElementById(targetId);
      if (!targetElement) return;

      const navbarHeight = navbar ? navbar.offsetHeight : 0;
      const targetPosition =
        targetElement.getBoundingClientRect().top +
        window.scrollY -
        navbarHeight -
        20; // 20px adicionales para mejorar la posición

      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
    }

    // Verificar si hay un hash en la URL al cargar la página
    function checkUrlHash() {
      const hash = window.location.hash;
      if (hash && hash.length > 1) {
        const targetId = hash.substring(1); // Remove the # character
        setTimeout(() => {
          scrollToSection(targetId);
        }, 100);
      }
    }

    // Inicializar el estado del scroll
    handleScroll();
    checkUrlHash();

    // Event Listeners
    window.addEventListener("scroll", handleScroll);
    mobileMenuToggle?.addEventListener("click", toggleMenu);

    // Manejar clics en enlaces de anclaje para scroll suave
    document
      .querySelectorAll(".nav-links a[data-section-id]")
      .forEach((anchor) => {
        anchor.addEventListener(
          "click",
          function (this: HTMLElement, e: Event) {
            const sectionId = this.getAttribute("data-section-id");
            if (!sectionId) return;

            e.preventDefault();
            closeMenu();

            // Actualizar URL para mantener el enlace sin cambiar de página
            const currentPath = window.location.pathname;
            const basePath = currentPath.endsWith('/') ? currentPath : `${currentPath}/`;
            window.history.pushState({}, "", `${basePath}#${sectionId}`);

            scrollToSection(sectionId);
          },
        );
      });

    // Manejar clics en enlaces normales
    document
      .querySelectorAll(".nav-links a:not([data-section-id])")
      .forEach((link) => {
        link.addEventListener("click", closeMenu);
      });

    // Limpiar event listeners al desmontar
    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("hashchange", checkUrlHash);
      mobileMenuToggle?.removeEventListener("click", toggleMenu);
      document.querySelectorAll(".nav-links a")?.forEach((link) => {
        link.removeEventListener("click", closeMenu);
      });
    };
  }

  // Configurar la navegación inicial
  let cleanup = setupNavbar();

  // Manejar la navegación de Astro
  document.addEventListener("astro:page-load", () => {
    // Limpiar los event listeners anteriores
    if (cleanup) cleanup();
    // Configurar nueva navegación
    cleanup = setupNavbar();
  });

  // Limpiar antes de la navegación
  document.addEventListener("astro:before-swap", () => {
    if (cleanup) cleanup();
  });
</script>

<style>
  .navbar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background-color: rgba(255, 255, 255, 0);
    color: #fff;
    transition: all 0.3s ease;
    z-index: 99;
    container-type: inline-size;
    container-name: navbarContainer;
    backdrop-filter: blur(6px);
  }

  /* Estilos predeterminados al hacer scroll */
  .navbar.scrolled {
    background-color: rgb(255, 255, 255, 0.9);
    color: #000000;
    padding: var(--espacio-2xs) 0;
  }

  /* Estilos oscuros para la página de contacto (por defecto, sin scroll) */
  .navbar.contact-page {
    background-color: rgba(0, 0, 0, 0.9);
    color: #ffffff;
  }

  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: var(--grid-max-width);
    margin: 0 auto;
    padding: var(--espacio-s) 0;
    padding-inline: var(--grid-gutter);
  }

  .logo-container {
    height: 50px;
    display: flex;
    align-items: center;
  }

  .logo {
    height: auto;
    max-height: 50px;
    width: auto;
    transition: opacity 0.3s ease;
  }

  .logo-blanco {
    opacity: 1;
    position: absolute;
  }

  .logo-negro {
    opacity: 0;
    position: absolute;
  }

  /* Comportamiento normal al hacer scroll */
  .navbar.scrolled .logo-blanco {
    opacity: 0;
  }

  .navbar.scrolled .logo-negro {
    opacity: 1;
  }

  /* Comportamiento en la página de contacto (por defecto, sin scroll) */
  .navbar.contact-page .logo-blanco {
    opacity: 1;
  }

  .navbar.contact-page .logo-negro {
    opacity: 0;
  }

  .nav-links {
    display: flex;
    list-style: none;
    gap: var(--espacio-s);
    margin: 0;
    padding: 0;
    font-size: var(--font-0);
    font-family: var(--Proxima);
    font-weight: 600;
    align-items: center;
  }

  .nav-links a {
    text-decoration: none;
    color: var(--color-blanco);
    transition:
      color 0.3s ease,
      transform 0.3s ease;
  }

  /* Comportamiento normal al hacer scroll */
  .navbar.scrolled .nav-links a {
    color: var(--color-dorado);
  }

  /* Comportamiento en la página de contacto (por defecto, sin scroll) */
  .navbar.contact-page .nav-links a {
    color: var(--color-blanco);
  }

  .navbar.scrolled .nav-links a:hover,
  .navbar.contact-page .nav-links a:hover {
    transform: scale(1.1);
  }

  .content section {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .menu-toggle {
    display: none;
    flex-direction: column;
    cursor: pointer;
  }

  .menu-icon {
    width: 30px;
    height: 20px;
    position: relative;
    transform: rotate(0deg);
    transition: 0.5s ease-in-out;
    cursor: pointer;
  }

  .menu-icon span {
    display: block;
    position: absolute;
    height: 3px;
    width: 100%;
    background: var(--color-blanco);
    border-radius: 9px;
    opacity: 1;
    left: 0;
    transform: rotate(0deg);
    transition: 0.25s ease-in-out;
  }

  /* Comportamiento normal al hacer scroll */
  .navbar.scrolled .menu-icon span {
    background: var(--color-dorado);
  }

  /* Comportamiento en la página de contacto (por defecto, sin scroll) */
  .navbar.contact-page .menu-icon span {
    background: var(--color-blanco);
  }

  .menu-icon span:nth-child(1) {
    top: 0px;
  }

  .menu-icon span:nth-child(2) {
    top: 8px;
  }

  .menu-icon span:nth-child(3) {
    top: 16px;
  }

  .menu-icon.active span:nth-child(1) {
    top: 8px;
    transform: rotate(135deg);
  }

  .menu-icon.active span:nth-child(2) {
    opacity: 0;
    left: -60px;
  }

  .menu-icon.active span:nth-child(3) {
    top: 8px;
    transform: rotate(-135deg);
  }

  @container navbarContainer (width < 1362px) {
    .nav-container {
      padding-inline: var(--grid-gutter);
    }
  }

  @container navbarContainer (width < 1000px) {
    .nav-container {
      flex-wrap: wrap;
    }

    .menu-toggle {
      display: flex;
      z-index: 1001;
    }

    .nav-links {
      position: fixed;
      left: -100%;
      top: 0;
      display: flex;
      flex-direction: column;
      background-color: rgba(0, 0, 0, 0.9);
      width: 100%;
      text-align: center;
      transition: 0.3s;
      box-shadow: 0 10px 27px rgba(0, 0, 0, 0.05);
      height: 100vh;
      justify-content: center;
      z-index: 1000;
      font-size: var(--font-2);
    }

    .nav-links-popover {
      position: relative !important;
      left: 0px !important;
      height: 1px !important;
      margin: var(--espacio-m) 0 !important;
    }

    .nav-links.active {
      left: 0;
    }

    .nav-links li a {
      margin: var(--espacio-2xs) 0;
      font-size: var(--font-2);
      color: var(--color-blanco);
    }
  }
</style>
