---
/**
 * @component CirculoAnimadoCSS
 * @description Reusable component that displays an animated circle with rotation
 * @author Cascade
 */
interface Props {
  /**
   * Percentage to display in the center of the circle
   */
  percentage?: number;
  /**
   * Text for the label below the percentage
   */
  label?: string;
  /**
   * Size of the circle in pixels
   */
  size?: number;
  /**
   * Animation duration in seconds
   */
  animationDuration?: number;
  /**
   * Border color of the circles
   */
  borderColor?: string;
  /**
   * Central text color
   */
  textColor?: string;
  /**
   * Background color of the nodes
   */
  nodesColor?: string;
  /**
   * Border color of the nodes
   */
  nodesBorderColor?: string;
  /**
   * Additional classes for the main container
   */
  className?: string;
}

const {
  percentage = 99,
  label = "Customer Satisfaction",
  size = 400,
  animationDuration = 20,
  borderColor = "rgba(0, 0, 0, 0.6)",
  textColor = "#000",
  nodesColor = "#000",
  nodesBorderColor = "#333",
  className = "",
} = Astro.props;

// Calculations for size and positioning
const nodesSize = size * 0.18;
const nodesOffset = nodesSize / 2;
---

<div
  class={`animated-circle-container ${className}`}
  style={`--circle-size: ${size}px;`}
>
  <div class="main-circle">
    <!-- Concentric circles -->
    <div class="circle outer-circle"></div>
    <div class="circle middle-circle"></div>
    <div class="circle inner-circle"></div>

    <!-- Corner nodes -->
    <div class="node top-node"></div>
    <div class="node right-node"></div>
    <div class="node bottom-node"></div>
    <div class="node left-node"></div>

    <!-- Central text -->
    <div class="central-text">
      <div class="percentage">{percentage}%</div>
      <div class="label">Customer<br />Satisfaction</div>
    </div>
  </div>
</div>

<style
  define:vars={{
    circleSize: `${size}px`,
    animationDuration: `${animationDuration}s`,
    borderColor,
    textColor,
    nodesColor,
    nodesBorderColor,
    nodesSize: `${nodesSize}px`,
    nodesOffset: `${nodesOffset}px`,
  }}
>
  .animated-circle-container {
    width: 100%;
    max-width: var(--circle-size);
    margin: 0 auto;
  }

  .main-circle {
    position: relative;
    width: var(--circle-size);
    height: var(--circle-size);
  }

  /* Concentric circles */
  .circle {
    position: absolute;
    border-radius: 50%;
    animation: rotate var(--animationDuration) linear infinite;
  }

  .outer-circle {
    top: -5%;
    left: -5%;
    width: 110%;
    height: 110%;
    border: none;
    position: relative;
  }

  /* Create a pseudo-element for the custom dashed border */
  .outer-circle::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    border: 4px dashed var(--borderColor);
    animation: rotate var(--animationDuration) linear infinite;
  }

  .middle-circle {
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
    border: 3px solid var(--borderColor);
  }

  .inner-circle {
    top: 15%;
    left: 15%;
    width: 70%;
    height: 70%;
    border: 3px solid var(--borderColor);
  }

  /* Corner nodes */
  .node {
    position: absolute;
    width: var(--nodesSize);
    height: var(--nodesSize);
    background-color: var(--nodesColor);
    border-radius: 50%;
    border: 3px solid var(--nodesBorderColor);
    animation: rotate var(--animationDuration) linear infinite;
  }

  .top-node {
    top: calc(-8% - var(--nodesOffset));
    left: calc(50% - var(--nodesOffset));
  }

  .right-node {
    top: calc(50% - var(--nodesOffset));
    right: calc(-8% - var(--nodesOffset));
  }

  .bottom-node {
    bottom: calc(-8% - var(--nodesOffset));
    left: calc(50% - var(--nodesOffset));
  }

  .left-node {
    top: calc(50% - var(--nodesOffset));
    left: calc(-8% - var(--nodesOffset));
  }

  /* Central text */
  .central-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: var(--textColor);
    z-index: 10;
  }

  .percentage {
    font-size: calc(var(--circle-size) * 0.18);
    font-weight: bold;
  }

  .label {
    font-size: calc(var(--circle-size) * 0.06);
    color: rgba(0, 0, 0, 0.7);
    margin-top: 0.25rem;
  }

  /* Rotation animation */
  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Responsive media queries */
  @media (max-width: 768px) {
    .animated-circle-container {
      max-width: 300px;
    }
  }

  @media (max-width: 480px) {
    .animated-circle-container {
    }
  }
</style>

<script>
  // Function to control animation from outside
  class AnimatedCircleController {
    static changeSpeed(element, durationSeconds) {
      const circles = element.querySelectorAll(".circle, .node");
      circles.forEach((circle) => {
        circle.style.animationDuration = `${durationSeconds}s`;
      });
    }

    static stopAnimation(element) {
      const circles = element.querySelectorAll(".circle, .node");
      circles.forEach((circle) => {
        circle.style.animationPlayState = "paused";
      });
    }

    static resumeAnimation(element) {
      const circles = element.querySelectorAll(".circle, .node");
      circles.forEach((circle) => {
        circle.style.animationPlayState = "running";
      });
    }
  }

  // Expose controller globally
  window.AnimatedCircleController = AnimatedCircleController;
</script>
